package gql_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"sapp/paperless-accounting/documents"
	"sapp/paperless-accounting/graph/gql_generated"
	"sapp/paperless-accounting/graph/gql_types"
)

// CreatePayment is the resolver for the createPayment field.
func (r *mutationResolver) CreatePayment(ctx context.Context, input gql_types.NewPayment) (*documents.Payment, error) {
	panic(fmt.Errorf("not implemented: CreatePayment - createPayment"))
}

// UpdatePayment is the resolver for the updatePayment field.
func (r *mutationResolver) UpdatePayment(ctx context.Context, input gql_types.UpdatePayment) (*documents.Payment, error) {
	panic(fmt.Errorf("not implemented: UpdatePayment - updatePayment"))
}

// DeletePayment is the resolver for the deletePayment field.
func (r *mutationResolver) DeletePayment(ctx context.Context, id string) (*documents.Payment, error) {
	panic(fmt.Errorf("not implemented: DeletePayment - deletePayment"))
}

// UpdateExpense is the resolver for the updateExpense field.
func (r *mutationResolver) UpdateExpense(ctx context.Context, input gql_types.UpdateExpense) (*documents.Expense, error) {
	panic(fmt.Errorf("not implemented: UpdateExpense - updateExpense"))
}

// UpdateIncome is the resolver for the updateIncome field.
func (r *mutationResolver) UpdateIncome(ctx context.Context, input gql_types.UpdateIncome) (*documents.Income, error) {
	panic(fmt.Errorf("not implemented: UpdateIncome - updateIncome"))
}

// Value is the resolver for the value field.
func (r *paymentResolver) Value(ctx context.Context, obj *documents.Payment) (float64, error) {
	panic(fmt.Errorf("not implemented: Value - value"))
}

// GetIncomes is the resolver for the getIncomes field.
func (r *queryResolver) GetIncomes(ctx context.Context) ([]*documents.Income, error) {
	panic(fmt.Errorf("not implemented: GetIncomes - getIncomes"))
}

// GetExpenses is the resolver for the getExpenses field.
func (r *queryResolver) GetExpenses(ctx context.Context) ([]*documents.Expense, error) {
	panic(fmt.Errorf("not implemented: GetExpenses - getExpenses"))
}

// GetPayments is the resolver for the getPayments field.
func (r *queryResolver) GetPayments(ctx context.Context) ([]*documents.Payment, error) {
	panic(fmt.Errorf("not implemented: GetPayments - getPayments"))
}

// GetIncome is the resolver for the getIncome field.
func (r *queryResolver) GetIncome(ctx context.Context, id string) (*documents.Income, error) {
	panic(fmt.Errorf("not implemented: GetIncome - getIncome"))
}

// GetExpense is the resolver for the getExpense field.
func (r *queryResolver) GetExpense(ctx context.Context, id string) (*documents.Expense, error) {
	panic(fmt.Errorf("not implemented: GetExpense - getExpense"))
}

// GetPayment is the resolver for the getPayment field.
func (r *queryResolver) GetPayment(ctx context.Context, id string) (*documents.Payment, error) {
	panic(fmt.Errorf("not implemented: GetPayment - getPayment"))
}

// Mutation returns gql_generated.MutationResolver implementation.
func (r *Resolver) Mutation() gql_generated.MutationResolver { return &mutationResolver{r} }

// Payment returns gql_generated.PaymentResolver implementation.
func (r *Resolver) Payment() gql_generated.PaymentResolver { return &paymentResolver{r} }

// Query returns gql_generated.QueryResolver implementation.
func (r *Resolver) Query() gql_generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type paymentResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
